const fs = require("fs-extra");
const path = require("path");
const os = require("os");

async function downloadMissingLibraries(
  instancePath,
  modpack,
  onProgress = null,
  launcher = null
) {
  if (!launcher) {
    throw new Error("Launcher instance is required");
  }

  const forgeVersion = `${modpack.minecraft_version}-${modpack.modloader}-${modpack.forge_version}`;
  const forgeProfilePath = path.join(
    instancePath,
    "versions",
    forgeVersion,
    `${forgeVersion}.json`
  );

  if (!(await fs.pathExists(forgeProfilePath))) {
    throw new Error(`Forge –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${forgeProfilePath}`);
  }

  console.log("üìã –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ Forge –ø—Ä–æ—Ñ–∏–ª—è...");
  const forgeProfile = JSON.parse(await fs.readFile(forgeProfilePath, "utf8"));
  const libraries = forgeProfile.libraries || [];

  console.log(`üìö –ù–∞–π–¥–µ–Ω–æ –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: ${libraries.length}`);

  for (let i = 0; i < libraries.length; i++) {
    const lib = libraries[i];
    if (lib.downloads?.artifact) {
      const libPath = path.join(
        instancePath,
        "libraries",
        lib.downloads.artifact.path
      );

      if (!(await fs.pathExists(libPath))) {
        console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º: ${path.basename(libPath)}`);
        await fs.ensureDir(path.dirname(libPath));

        try {
          await launcher.downloadFile(
            lib.downloads.artifact.url,
            libPath,
            null
          );
          console.log(`‚úÖ –°–∫–∞—á–∞–Ω–æ: ${path.basename(libPath)}`);
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
          // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
          if (
            lib.name.includes("modlauncher") ||
            lib.name.includes("fmlloader")
          ) {
            throw error;
          }
        }
      }
    }

    if (onProgress) {
      onProgress(Math.round(((i + 1) / libraries.length) * 100));
    }
  }

  console.log("‚úÖ –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ Forge –ø—Ä–æ—Ñ–∏–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
}

async function downloadNativeLibraries(
  instancePath,
  onProgress = null,
  launcher = null
) {
  // –î–û–ë–ê–í–ò–¢–¨ launcher
  if (!launcher) {
    // –î–û–ë–ê–í–ò–¢–¨
    throw new Error("Launcher instance is required");
  }
  const platform = os.platform();
  const arch = os.arch();

  let nativeSuffix = "";
  if (platform === "win32") {
    nativeSuffix = arch === "x64" ? "natives-windows" : "natives-windows-x86";
  } else if (platform === "darwin") {
    nativeSuffix = "natives-macos";
  } else {
    nativeSuffix = "natives-linux";
  }

  const nativesDir = path.join(instancePath, "versions", "natives");
  const libsDir = path.join(instancePath, "libraries");

  await fs.ensureDir(nativesDir);

  // –°–ø–∏—Å–æ–∫ –Ω–∞—Ç–∏–≤–Ω—ã—Ö LWJGL –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è MC 1.20.1
  const nativeLibs = [
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl/3.3.1/lwjgl-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl",
        "3.3.1",
        `lwjgl-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-jemalloc/3.3.1/lwjgl-jemalloc-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-jemalloc",
        "3.3.1",
        `lwjgl-jemalloc-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-openal/3.3.1/lwjgl-openal-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-openal",
        "3.3.1",
        `lwjgl-openal-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-opengl/3.3.1/lwjgl-opengl-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-opengl",
        "3.3.1",
        `lwjgl-opengl-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-glfw/3.3.1/lwjgl-glfw-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-glfw",
        "3.3.1",
        `lwjgl-glfw-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-stb/3.3.1/lwjgl-stb-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-stb",
        "3.3.1",
        `lwjgl-stb-3.3.1-${nativeSuffix}.jar`
      ),
    },
    {
      url: `https://repo1.maven.org/maven2/org/lwjgl/lwjgl-tinyfd/3.3.1/lwjgl-tinyfd-3.3.1-${nativeSuffix}.jar`,
      path: path.join(
        libsDir,
        "org",
        "lwjgl",
        "lwjgl-tinyfd",
        "3.3.1",
        `lwjgl-tinyfd-3.3.1-${nativeSuffix}.jar`
      ),
    },
  ];

  console.log(`–°–∫–∞—á–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ LWJGL –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è ${platform} ${arch}...`);

  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π for —Ü–∏–∫–ª —Å –∏–Ω–¥–µ–∫—Å–æ–º i
  for (let i = 0; i < nativeLibs.length; i++) {
    const lib = nativeLibs[i];

    if (!(await fs.pathExists(lib.path))) {
      console.log(`–°–∫–∞—á–∏–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É: ${path.basename(lib.path)}`);
      await fs.ensureDir(path.dirname(lib.path));
      try {
        await launcher.downloadFile(lib.url, lib.path, null);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É natives
        await launcher.extractNativesToDir(lib.path, nativesDir);
        console.log(
          `‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ: ${path.basename(lib.path)}`
        );
      } catch (error) {
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ${lib.url}: ${error.message}`
        );
      }
    } else {
      // –ï—Å–ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–∂–µ –µ—Å—Ç—å, –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Ç–∏–≤—ã
      await launcher.extractNativesToDir(lib.path, nativesDir);
      console.log(`‚úÖ –ù–∞—Ç–∏–≤—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã: ${path.basename(lib.path)}`);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Ç–µ–ø–µ—Ä—å i –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (onProgress) {
      onProgress(Math.round(((i + 1) / nativeLibs.length) * 100));
    }
  }

  console.log("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  if (onProgress) onProgress(100);
}

module.exports = {
  downloadMissingLibraries,
  downloadNativeLibraries,
};
